/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/nalum/pingdom-operator/pkg/apis/pingdomcheck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HTTPCheckLister helps list HTTPChecks.
type HTTPCheckLister interface {
	// List lists all HTTPChecks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPCheck, err error)
	// HTTPChecks returns an object that can list and get HTTPChecks.
	HTTPChecks(namespace string) HTTPCheckNamespaceLister
	HTTPCheckListerExpansion
}

// hTTPCheckLister implements the HTTPCheckLister interface.
type hTTPCheckLister struct {
	indexer cache.Indexer
}

// NewHTTPCheckLister returns a new HTTPCheckLister.
func NewHTTPCheckLister(indexer cache.Indexer) HTTPCheckLister {
	return &hTTPCheckLister{indexer: indexer}
}

// List lists all HTTPChecks in the indexer.
func (s *hTTPCheckLister) List(selector labels.Selector) (ret []*v1alpha1.HTTPCheck, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HTTPCheck))
	})
	return ret, err
}

// HTTPChecks returns an object that can list and get HTTPChecks.
func (s *hTTPCheckLister) HTTPChecks(namespace string) HTTPCheckNamespaceLister {
	return hTTPCheckNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HTTPCheckNamespaceLister helps list and get HTTPChecks.
type HTTPCheckNamespaceLister interface {
	// List lists all HTTPChecks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPCheck, err error)
	// Get retrieves the HTTPCheck from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HTTPCheck, error)
	HTTPCheckNamespaceListerExpansion
}

// hTTPCheckNamespaceLister implements the HTTPCheckNamespaceLister
// interface.
type hTTPCheckNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HTTPChecks in the indexer for a given namespace.
func (s hTTPCheckNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HTTPCheck, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HTTPCheck))
	})
	return ret, err
}

// Get retrieves the HTTPCheck from the indexer for a given namespace and name.
func (s hTTPCheckNamespaceLister) Get(name string) (*v1alpha1.HTTPCheck, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httpcheck"), name)
	}
	return obj.(*v1alpha1.HTTPCheck), nil
}
